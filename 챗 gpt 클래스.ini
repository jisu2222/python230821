# 기본 클래스인 Person을 정의합니다.
class Person:
    def __init__(self, id, name):
        self.id = id
        self.name = name

    def printinfo(self):
        print(f"ID: {self.id}\n이름: {self.name}")

# Person 클래스를 상속받는 Manager 클래스를 정의합니다.
class Manager(Person):
    def __init__(self, id, name, skill):
        super().__init__(id, name)
        self.skill = skill

    def printinfo(self):
        super().printinfo()
        print(f"기술: {self.skill}")

# Person 클래스를 상속받는 Employee 클래스를 정의합니다.
class Employee(Person):
    def __init__(self, id, name, role):
        super().__init__(id, name)
        self.role = role

    def printinfo(self):
        super().printinfo()
        print(f"직책: {self.role}")

# 예제 사용법
if __name__ == "__main__":
    # Manager와 Employee 인스턴스를 생성합니다.
    manager1 = Manager(id=101, name="Alice", skill="커뮤니케이션")
    employee1 = Employee(id=201, name="Bob", role="디자이너")
    
    # Manager와 Employee 정보를 출력합니다.
    print("매니저 1 정보:")
    manager1.printinfo()
    
    print("\n직원 1 정보:")
    employee1.printinfo()

    # 더 많은 인스턴스를 생성합니다.
    manager2 = Manager(id=102, name="Charlie", skill="문제 해결")
    employee2 = Employee(id=202, name="David", role="QA 엔지니어")
    
    manager3 = Manager(id=103, name="Eve", skill="전략적 기획")
    employee3 = Employee(id=203, name="Frank", role="영업 대표")
    
    manager4 = Manager(id=104, name="Grace", skill="팀 관리")
    employee4 = Employee(id=204, name="Hank", role="소프트웨어 엔지니어")
    
    manager5 = Manager(id=105, name="Ivy", skill="협상")
    employee5 = Employee(id=205, name="Jack", role="데이터 분석가")
    
    manager6 = Manager(id=106, name="Karen", skill="의사 결정")
    employee6 = Employee(id=206, name="Liam", role="프로젝트 매니저")
    
    manager7 = Manager(id=107, name="Mia", skill="혁신")
    employee7 = Employee(id=207, name="Nora", role="마케팅 전문가")

    # 추가 인스턴스에 대한 정보를 출력합니다.
    print("\n매니저 2 정보:")
    manager2.printinfo()
    
    print("\n직원 2 정보:")
    employee2.printinfo()
    
    print("\n매니저 3 정보:")
    manager3.printinfo()
    
    print("\n직원 3 정보:")
    employee3.printinfo()
    
    # ... 나머지 인스턴스에 대한 정보를 계속해서 출력합니다.

