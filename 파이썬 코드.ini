#실행: ctrl+F5
# List
my_list = [1, 2, 3, 4, 5]

# Tuple
my_tuple = (1, 2, 3, 4, 5)

# Set
my_set = {1, 2, 3, 4, 5}

# Dict
my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}

# 장점과 단점 비교 함수
def compare_advantages_disadvantages(data_structure, name):
    advantages = []
    disadvantages = []

    # 장점
    advantages.append(f"{name}의 장점:")
    advantages.append(f"- {name}은 데이터를 순서대로 저장할 수 있습니다.")
    if name != "Set":
        advantages.append(f"- {name}은 중복된 데이터를 허용합니다.")
    advantages.append(f"- {name}은 각 요소에 접근하는 시간 복잡도가 O(1)입니다.")
    
    # 단점
    disadvantages.append(f"{name}의 단점:")
    disadvantages.append(f"- {name}은 데이터의 크기가 큰 경우 메모리 소비가 증가할 수 있습니다.")
    if name == "Tuple" or name == "Set":
        disadvantages.append(f"- {name}은 요소를 변경할 수 없습니다.")
    if name != "Dict":
        disadvantages.append(f"- {name}은 요소 검색 속도가 List와 비교하여 상대적으로 느립니다.")
    
    return advantages, disadvantages

list_advantages, list_disadvantages = compare_advantages_disadvantages(my_list, "List")
tuple_advantages, tuple_disadvantages = compare_advantages_disadvantages(my_tuple, "Tuple")
set_advantages, set_disadvantages = compare_advantages_disadvantages(my_set, "Set")
dict_advantages, dict_disadvantages = compare_advantages_disadvantages(my_dict, "Dict")

# 결과 출력
print("\n".join(list_advantages))
print("\n".join(list_disadvantages))
print("\n".join(tuple_advantages))
print("\n".join(tuple_disadvantages))
print("\n".join(set_advantages))
print("\n".join(set_disadvantages))
print("\n".join(dict_advantages))
print("\n".join(dict_disadvantages))

